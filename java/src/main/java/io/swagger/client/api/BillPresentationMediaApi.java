/*
 * Account Management
 * This is Swagger UI environment generated for the TMF Account Management specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BillPresentationMedia;
import io.swagger.client.model.BillPresentationMediaCreate;
import io.swagger.client.model.BillPresentationMediaUpdate;
import io.swagger.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillPresentationMediaApi {
    private ApiClient apiClient;

    public BillPresentationMediaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillPresentationMediaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBillPresentationMedia
     * @param billPresentationMedia The BillPresentationMedia to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBillPresentationMediaCall(BillPresentationMediaCreate billPresentationMedia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = billPresentationMedia;

        // create path and map variables
        String localVarPath = "/billPresentationMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBillPresentationMediaValidateBeforeCall(BillPresentationMediaCreate billPresentationMedia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billPresentationMedia' is set
        if (billPresentationMedia == null) {
            throw new ApiException("Missing the required parameter 'billPresentationMedia' when calling createBillPresentationMedia(Async)");
        }
        

        com.squareup.okhttp.Call call = createBillPresentationMediaCall(billPresentationMedia, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a BillPresentationMedia
     * This operation creates a BillPresentationMedia entity.
     * @param billPresentationMedia The BillPresentationMedia to be created (required)
     * @return BillPresentationMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillPresentationMedia createBillPresentationMedia(BillPresentationMediaCreate billPresentationMedia) throws ApiException {
        ApiResponse<BillPresentationMedia> resp = createBillPresentationMediaWithHttpInfo(billPresentationMedia);
        return resp.getData();
    }

    /**
     * Creates a BillPresentationMedia
     * This operation creates a BillPresentationMedia entity.
     * @param billPresentationMedia The BillPresentationMedia to be created (required)
     * @return ApiResponse&lt;BillPresentationMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillPresentationMedia> createBillPresentationMediaWithHttpInfo(BillPresentationMediaCreate billPresentationMedia) throws ApiException {
        com.squareup.okhttp.Call call = createBillPresentationMediaValidateBeforeCall(billPresentationMedia, null, null);
        Type localVarReturnType = new TypeToken<BillPresentationMedia>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a BillPresentationMedia (asynchronously)
     * This operation creates a BillPresentationMedia entity.
     * @param billPresentationMedia The BillPresentationMedia to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBillPresentationMediaAsync(BillPresentationMediaCreate billPresentationMedia, final ApiCallback<BillPresentationMedia> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBillPresentationMediaValidateBeforeCall(billPresentationMedia, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillPresentationMedia>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBillPresentationMedia
     * @param id Identifier of the BillPresentationMedia (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBillPresentationMediaCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billPresentationMedia/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBillPresentationMediaValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBillPresentationMedia(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBillPresentationMediaCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a BillPresentationMedia
     * This operation deletes a BillPresentationMedia entity.
     * @param id Identifier of the BillPresentationMedia (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBillPresentationMedia(String id) throws ApiException {
        deleteBillPresentationMediaWithHttpInfo(id);
    }

    /**
     * Deletes a BillPresentationMedia
     * This operation deletes a BillPresentationMedia entity.
     * @param id Identifier of the BillPresentationMedia (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBillPresentationMediaWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteBillPresentationMediaValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a BillPresentationMedia (asynchronously)
     * This operation deletes a BillPresentationMedia entity.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBillPresentationMediaAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBillPresentationMediaValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listBillPresentationMedia
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBillPresentationMediaCall(String fields, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billPresentationMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBillPresentationMediaValidateBeforeCall(String fields, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listBillPresentationMediaCall(fields, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List or find BillPresentationMedia objects
     * This operation list or find BillPresentationMedia entities
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @return List&lt;BillPresentationMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BillPresentationMedia> listBillPresentationMedia(String fields, Integer offset, Integer limit) throws ApiException {
        ApiResponse<List<BillPresentationMedia>> resp = listBillPresentationMediaWithHttpInfo(fields, offset, limit);
        return resp.getData();
    }

    /**
     * List or find BillPresentationMedia objects
     * This operation list or find BillPresentationMedia entities
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @return ApiResponse&lt;List&lt;BillPresentationMedia&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BillPresentationMedia>> listBillPresentationMediaWithHttpInfo(String fields, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = listBillPresentationMediaValidateBeforeCall(fields, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<List<BillPresentationMedia>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List or find BillPresentationMedia objects (asynchronously)
     * This operation list or find BillPresentationMedia entities
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBillPresentationMediaAsync(String fields, Integer offset, Integer limit, final ApiCallback<List<BillPresentationMedia>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBillPresentationMediaValidateBeforeCall(fields, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BillPresentationMedia>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchBillPresentationMedia
     * @param id Identifier of the BillPresentationMedia (required)
     * @param billPresentationMedia The BillPresentationMedia to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchBillPresentationMediaCall(String id, BillPresentationMediaUpdate billPresentationMedia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = billPresentationMedia;

        // create path and map variables
        String localVarPath = "/billPresentationMedia/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchBillPresentationMediaValidateBeforeCall(String id, BillPresentationMediaUpdate billPresentationMedia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchBillPresentationMedia(Async)");
        }
        
        // verify the required parameter 'billPresentationMedia' is set
        if (billPresentationMedia == null) {
            throw new ApiException("Missing the required parameter 'billPresentationMedia' when calling patchBillPresentationMedia(Async)");
        }
        

        com.squareup.okhttp.Call call = patchBillPresentationMediaCall(id, billPresentationMedia, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates partially a BillPresentationMedia
     * This operation updates partially a BillPresentationMedia entity.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param billPresentationMedia The BillPresentationMedia to be updated (required)
     * @return BillPresentationMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillPresentationMedia patchBillPresentationMedia(String id, BillPresentationMediaUpdate billPresentationMedia) throws ApiException {
        ApiResponse<BillPresentationMedia> resp = patchBillPresentationMediaWithHttpInfo(id, billPresentationMedia);
        return resp.getData();
    }

    /**
     * Updates partially a BillPresentationMedia
     * This operation updates partially a BillPresentationMedia entity.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param billPresentationMedia The BillPresentationMedia to be updated (required)
     * @return ApiResponse&lt;BillPresentationMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillPresentationMedia> patchBillPresentationMediaWithHttpInfo(String id, BillPresentationMediaUpdate billPresentationMedia) throws ApiException {
        com.squareup.okhttp.Call call = patchBillPresentationMediaValidateBeforeCall(id, billPresentationMedia, null, null);
        Type localVarReturnType = new TypeToken<BillPresentationMedia>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates partially a BillPresentationMedia (asynchronously)
     * This operation updates partially a BillPresentationMedia entity.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param billPresentationMedia The BillPresentationMedia to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchBillPresentationMediaAsync(String id, BillPresentationMediaUpdate billPresentationMedia, final ApiCallback<BillPresentationMedia> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchBillPresentationMediaValidateBeforeCall(id, billPresentationMedia, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillPresentationMedia>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveBillPresentationMedia
     * @param id Identifier of the BillPresentationMedia (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveBillPresentationMediaCall(String id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billPresentationMedia/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveBillPresentationMediaValidateBeforeCall(String id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveBillPresentationMedia(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveBillPresentationMediaCall(id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves a BillPresentationMedia by ID
     * This operation retrieves a BillPresentationMedia entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @return BillPresentationMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BillPresentationMedia retrieveBillPresentationMedia(String id, String fields) throws ApiException {
        ApiResponse<BillPresentationMedia> resp = retrieveBillPresentationMediaWithHttpInfo(id, fields);
        return resp.getData();
    }

    /**
     * Retrieves a BillPresentationMedia by ID
     * This operation retrieves a BillPresentationMedia entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @return ApiResponse&lt;BillPresentationMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BillPresentationMedia> retrieveBillPresentationMediaWithHttpInfo(String id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = retrieveBillPresentationMediaValidateBeforeCall(id, fields, null, null);
        Type localVarReturnType = new TypeToken<BillPresentationMedia>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a BillPresentationMedia by ID (asynchronously)
     * This operation retrieves a BillPresentationMedia entity. Attribute selection is enabled for all first level attributes.
     * @param id Identifier of the BillPresentationMedia (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveBillPresentationMediaAsync(String id, String fields, final ApiCallback<BillPresentationMedia> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveBillPresentationMediaValidateBeforeCall(id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BillPresentationMedia>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
