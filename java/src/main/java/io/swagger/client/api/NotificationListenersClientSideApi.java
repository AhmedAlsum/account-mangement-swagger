/*
 * Account Management
 * This is Swagger UI environment generated for the TMF Account Management specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BillingAccountAttributeValueChangeEvent;
import io.swagger.client.model.BillingAccountStateChangeEvent;
import io.swagger.client.model.Error;
import io.swagger.client.model.EventSubscription;
import io.swagger.client.model.FinancialAccountAttributeValueChangeEvent;
import io.swagger.client.model.FinancialAccountCreateEvent;
import io.swagger.client.model.FinancialAccountDeleteEvent;
import io.swagger.client.model.FinancialAccountStateChangeEvent;
import io.swagger.client.model.PartyAccountAttributeValueChangeEvent;
import io.swagger.client.model.PartyAccountStateChangeEvent;
import io.swagger.client.model.SettlementAccountAttributeValueChangeEvent;
import io.swagger.client.model.SettlementAccountStateChangeEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationListenersClientSideApi {
    private ApiClient apiClient;

    public NotificationListenersClientSideApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationListenersClientSideApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listenToBillingAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToBillingAccountAttributeValueChangeEventCall(BillingAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/billingAccountAttributeValueChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToBillingAccountAttributeValueChangeEventValidateBeforeCall(BillingAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToBillingAccountAttributeValueChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToBillingAccountAttributeValueChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity BillingAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification BillingAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToBillingAccountAttributeValueChangeEvent(BillingAccountAttributeValueChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToBillingAccountAttributeValueChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity BillingAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification BillingAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToBillingAccountAttributeValueChangeEventWithHttpInfo(BillingAccountAttributeValueChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToBillingAccountAttributeValueChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity BillingAccountAttributeValueChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification BillingAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToBillingAccountAttributeValueChangeEventAsync(BillingAccountAttributeValueChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToBillingAccountAttributeValueChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToBillingAccountStateChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToBillingAccountStateChangeEventCall(BillingAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/billingAccountStateChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToBillingAccountStateChangeEventValidateBeforeCall(BillingAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToBillingAccountStateChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToBillingAccountStateChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity BillingAccountStateChangeEvent
     * Example of a client listener for receiving the notification BillingAccountStateChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToBillingAccountStateChangeEvent(BillingAccountStateChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToBillingAccountStateChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity BillingAccountStateChangeEvent
     * Example of a client listener for receiving the notification BillingAccountStateChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToBillingAccountStateChangeEventWithHttpInfo(BillingAccountStateChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToBillingAccountStateChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity BillingAccountStateChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification BillingAccountStateChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToBillingAccountStateChangeEventAsync(BillingAccountStateChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToBillingAccountStateChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToFinancialAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountAttributeValueChangeEventCall(FinancialAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/financialAccountAttributeValueChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToFinancialAccountAttributeValueChangeEventValidateBeforeCall(FinancialAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToFinancialAccountAttributeValueChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToFinancialAccountAttributeValueChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity FinancialAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification FinancialAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToFinancialAccountAttributeValueChangeEvent(FinancialAccountAttributeValueChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToFinancialAccountAttributeValueChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity FinancialAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification FinancialAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToFinancialAccountAttributeValueChangeEventWithHttpInfo(FinancialAccountAttributeValueChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToFinancialAccountAttributeValueChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity FinancialAccountAttributeValueChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification FinancialAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountAttributeValueChangeEventAsync(FinancialAccountAttributeValueChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToFinancialAccountAttributeValueChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToFinancialAccountCreateEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountCreateEventCall(FinancialAccountCreateEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/financialAccountCreateEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToFinancialAccountCreateEventValidateBeforeCall(FinancialAccountCreateEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToFinancialAccountCreateEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToFinancialAccountCreateEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity FinancialAccountCreateEvent
     * Example of a client listener for receiving the notification FinancialAccountCreateEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToFinancialAccountCreateEvent(FinancialAccountCreateEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToFinancialAccountCreateEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity FinancialAccountCreateEvent
     * Example of a client listener for receiving the notification FinancialAccountCreateEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToFinancialAccountCreateEventWithHttpInfo(FinancialAccountCreateEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToFinancialAccountCreateEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity FinancialAccountCreateEvent (asynchronously)
     * Example of a client listener for receiving the notification FinancialAccountCreateEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountCreateEventAsync(FinancialAccountCreateEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToFinancialAccountCreateEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToFinancialAccountDeleteEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountDeleteEventCall(FinancialAccountDeleteEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/financialAccountDeleteEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToFinancialAccountDeleteEventValidateBeforeCall(FinancialAccountDeleteEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToFinancialAccountDeleteEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToFinancialAccountDeleteEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity FinancialAccountDeleteEvent
     * Example of a client listener for receiving the notification FinancialAccountDeleteEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToFinancialAccountDeleteEvent(FinancialAccountDeleteEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToFinancialAccountDeleteEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity FinancialAccountDeleteEvent
     * Example of a client listener for receiving the notification FinancialAccountDeleteEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToFinancialAccountDeleteEventWithHttpInfo(FinancialAccountDeleteEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToFinancialAccountDeleteEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity FinancialAccountDeleteEvent (asynchronously)
     * Example of a client listener for receiving the notification FinancialAccountDeleteEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountDeleteEventAsync(FinancialAccountDeleteEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToFinancialAccountDeleteEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToFinancialAccountStateChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountStateChangeEventCall(FinancialAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/financialAccountStateChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToFinancialAccountStateChangeEventValidateBeforeCall(FinancialAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToFinancialAccountStateChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToFinancialAccountStateChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity FinancialAccountStateChangeEvent
     * Example of a client listener for receiving the notification FinancialAccountStateChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToFinancialAccountStateChangeEvent(FinancialAccountStateChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToFinancialAccountStateChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity FinancialAccountStateChangeEvent
     * Example of a client listener for receiving the notification FinancialAccountStateChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToFinancialAccountStateChangeEventWithHttpInfo(FinancialAccountStateChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToFinancialAccountStateChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity FinancialAccountStateChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification FinancialAccountStateChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToFinancialAccountStateChangeEventAsync(FinancialAccountStateChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToFinancialAccountStateChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToPartyAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToPartyAccountAttributeValueChangeEventCall(PartyAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/partyAccountAttributeValueChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToPartyAccountAttributeValueChangeEventValidateBeforeCall(PartyAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToPartyAccountAttributeValueChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToPartyAccountAttributeValueChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity PartyAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification PartyAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToPartyAccountAttributeValueChangeEvent(PartyAccountAttributeValueChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToPartyAccountAttributeValueChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity PartyAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification PartyAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToPartyAccountAttributeValueChangeEventWithHttpInfo(PartyAccountAttributeValueChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToPartyAccountAttributeValueChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity PartyAccountAttributeValueChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification PartyAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToPartyAccountAttributeValueChangeEventAsync(PartyAccountAttributeValueChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToPartyAccountAttributeValueChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToPartyAccountStateChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToPartyAccountStateChangeEventCall(PartyAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/partyAccountStateChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToPartyAccountStateChangeEventValidateBeforeCall(PartyAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToPartyAccountStateChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToPartyAccountStateChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity PartyAccountStateChangeEvent
     * Example of a client listener for receiving the notification PartyAccountStateChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToPartyAccountStateChangeEvent(PartyAccountStateChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToPartyAccountStateChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity PartyAccountStateChangeEvent
     * Example of a client listener for receiving the notification PartyAccountStateChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToPartyAccountStateChangeEventWithHttpInfo(PartyAccountStateChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToPartyAccountStateChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity PartyAccountStateChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification PartyAccountStateChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToPartyAccountStateChangeEventAsync(PartyAccountStateChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToPartyAccountStateChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToSettlementAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToSettlementAccountAttributeValueChangeEventCall(SettlementAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/settlementAccountAttributeValueChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToSettlementAccountAttributeValueChangeEventValidateBeforeCall(SettlementAccountAttributeValueChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToSettlementAccountAttributeValueChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToSettlementAccountAttributeValueChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity SettlementAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification SettlementAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToSettlementAccountAttributeValueChangeEvent(SettlementAccountAttributeValueChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToSettlementAccountAttributeValueChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity SettlementAccountAttributeValueChangeEvent
     * Example of a client listener for receiving the notification SettlementAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToSettlementAccountAttributeValueChangeEventWithHttpInfo(SettlementAccountAttributeValueChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToSettlementAccountAttributeValueChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity SettlementAccountAttributeValueChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification SettlementAccountAttributeValueChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToSettlementAccountAttributeValueChangeEventAsync(SettlementAccountAttributeValueChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToSettlementAccountAttributeValueChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listenToSettlementAccountStateChangeEvent
     * @param data The event data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenToSettlementAccountStateChangeEventCall(SettlementAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/listener/settlementAccountStateChangeEvent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenToSettlementAccountStateChangeEventValidateBeforeCall(SettlementAccountStateChangeEvent data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling listenToSettlementAccountStateChangeEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = listenToSettlementAccountStateChangeEventCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Client listener for entity SettlementAccountStateChangeEvent
     * Example of a client listener for receiving the notification SettlementAccountStateChangeEvent
     * @param data The event data (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSubscription listenToSettlementAccountStateChangeEvent(SettlementAccountStateChangeEvent data) throws ApiException {
        ApiResponse<EventSubscription> resp = listenToSettlementAccountStateChangeEventWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * Client listener for entity SettlementAccountStateChangeEvent
     * Example of a client listener for receiving the notification SettlementAccountStateChangeEvent
     * @param data The event data (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSubscription> listenToSettlementAccountStateChangeEventWithHttpInfo(SettlementAccountStateChangeEvent data) throws ApiException {
        com.squareup.okhttp.Call call = listenToSettlementAccountStateChangeEventValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Client listener for entity SettlementAccountStateChangeEvent (asynchronously)
     * Example of a client listener for receiving the notification SettlementAccountStateChangeEvent
     * @param data The event data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenToSettlementAccountStateChangeEventAsync(SettlementAccountStateChangeEvent data, final ApiCallback<EventSubscription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenToSettlementAccountStateChangeEventValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
